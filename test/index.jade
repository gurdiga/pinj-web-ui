doctype html
head
	meta(charset="utf-8")
	title Tests:
	link(rel="stylesheet", href="node_modules/mocha/mocha.css")

body
	#mocha

	script(src="node_modules/mocha/mocha.js")
	script(src="node_modules/chai/chai.js")
	script(src="node_modules/sinon/pkg/sinon-1.12.1.js")
	script(src="node_modules/sinon-chai/lib/sinon-chai.js")
	script(src="node_modules/chai-as-promised/lib/chai-as-promised.js")
	script(src="node_modules/scriptjs/dist/script.min.js")

	script.
		window.mocha.setup({
			'ui': 'bdd',
			'timeout': 5000
		});
		window.expect = chai.expect;

		window.chai.config.includeStack = true;
		window.chai.config.showDiff = false;

		beforeEach(function() {
			this.timeout(5000);
			this.sinon = sinon.sandbox.create();
		});

		afterEach(function() {
			this.sinon.restore();
		});

	script(src="test/lib.js")
	script(src="test/helpers.js")

	script.
		loadTestScripts().then(runMocha);

		function loadTestScripts() {
			var allTests = !{JSON.stringify(testFiles(), null, '  ')};
			var testsToRun = allTests
				.filter(getTestFilter())
				.filter(notInfrastructureFiles);

			return Q.Promise(function(resolve) {
				$script(testsToRun, resolve);
			});

			function getTestFilter() {
				if (location.hash === '#') return function() { return true; };
				else {
					var testFilter = new RegExp(location.hash.substr(1));
					return function(path) { return testFilter.test(path); };
				}
			}
		}

		function runMocha() {
			before(function() {
				window.H = this.helpers;
			});

			var myGlobals = ['H'];
			var ieIframeNameGlobals = ['app', 'submit-trap'];
			var ieFirebaseGlobals = ['pLPCommand1', 'pRTLPCB1', 'pLPCommand2', 'pRTLPCB2'];
			var allGlobals = myGlobals.concat(ieIframeNameGlobals).concat(ieFirebaseGlobals);

			window.mocha.checkLeaks();
			window.mocha.globals(allGlobals);
			window.mocha.run();
		}

		function notInfrastructureFiles(path) {
			if (path === 'test/lib.js' || path === 'test/helpers.js') return false;
			else return true;
		}
